/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Dictionary', null, global);
goog.exportSymbol('proto.Dictionary.Entry', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Dictionary.repeatedFields_, null);
};
goog.inherits(proto.Dictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Dictionary.displayName = 'proto.Dictionary';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Dictionary.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Dictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    entriesList: jspb.Message.toObjectList(msg.getEntriesList(),
    proto.Dictionary.Entry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary}
 */
proto.Dictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary;
  return proto.Dictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary}
 */
proto.Dictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Dictionary.Entry;
      reader.readMessage(value,proto.Dictionary.Entry.deserializeBinaryFromReader);
      msg.getEntriesList().push(value);
      msg.setEntriesList(msg.getEntriesList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Dictionary.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Dictionary.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getEntriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Dictionary.Entry.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Dictionary} The clone.
 */
proto.Dictionary.prototype.cloneMessage = function() {
  return /** @type {!proto.Dictionary} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Entry entries = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Dictionary.Entry>}
 */
proto.Dictionary.prototype.getEntriesList = function() {
  return /** @type{!Array.<!proto.Dictionary.Entry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Dictionary.Entry, 1));
};


/** @param {Array.<!proto.Dictionary.Entry>} value  */
proto.Dictionary.prototype.setEntriesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.Dictionary.prototype.clearEntriesList = function() {
  this.setEntriesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary.Entry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Dictionary.Entry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Dictionary.Entry.displayName = 'proto.Dictionary.Entry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.Entry.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.Entry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary.Entry} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Dictionary.Entry.toObject = function(includeInstance, msg) {
  var f, obj = {
    headwordId: msg.getHeadwordId(),
    simplified: msg.getSimplified(),
    traditional: msg.getTraditional(),
    pinyin: msg.getPinyin(),
    english: msg.getEnglish(),
    pos: msg.getPos(),
    conceptCn: msg.getConceptCn(),
    conceptEn: msg.getConceptEn(),
    topicCn: msg.getTopicCn(),
    topicEn: msg.getTopicEn(),
    parentCn: msg.getParentCn(),
    parentEn: msg.getParentEn(),
    image: msg.getImage(),
    mp3: msg.getMp3(),
    notes: msg.getNotes(),
    luid: msg.getLuid()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary.Entry}
 */
proto.Dictionary.Entry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary.Entry;
  return proto.Dictionary.Entry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary.Entry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary.Entry}
 */
proto.Dictionary.Entry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadwordId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSimplified(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraditional(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPinyin(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnglish(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPos(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setConceptCn(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setConceptEn(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopicCn(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setTopicEn(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentCn(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentEn(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setImage(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setMp3(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setNotes(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLuid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary.Entry} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Dictionary.Entry.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.Entry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Dictionary.Entry.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getHeadwordId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = this.getSimplified();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getTraditional();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getPinyin();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getEnglish();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getPos();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getConceptCn();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = this.getConceptEn();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = this.getTopicCn();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getTopicEn();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getParentCn();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getParentEn();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getImage();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getMp3();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = this.getNotes();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
  f = this.getLuid();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Dictionary.Entry} The clone.
 */
proto.Dictionary.Entry.prototype.cloneMessage = function() {
  return /** @type {!proto.Dictionary.Entry} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int32 headword_id = 1;
 * @return {number}
 */
proto.Dictionary.Entry.prototype.getHeadwordId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.Dictionary.Entry.prototype.setHeadwordId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string simplified = 2;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getSimplified = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setSimplified = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string traditional = 3;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getTraditional = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setTraditional = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string pinyin = 4;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getPinyin = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setPinyin = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string english = 5;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getEnglish = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setEnglish = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string pos = 6;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getPos = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setPos = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional string concept_cn = 7;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getConceptCn = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setConceptCn = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional string concept_en = 8;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getConceptEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setConceptEn = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string topic_cn = 9;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getTopicCn = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setTopicCn = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string topic_en = 10;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getTopicEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setTopicEn = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string parent_cn = 11;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getParentCn = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setParentCn = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string parent_en = 12;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getParentEn = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setParentEn = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string image = 13;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setImage = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional string mp3 = 14;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getMp3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 14, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setMp3 = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional string notes = 15;
 * @return {string}
 */
proto.Dictionary.Entry.prototype.getNotes = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 15, ""));
};


/** @param {string} value  */
proto.Dictionary.Entry.prototype.setNotes = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional int32 luid = 16;
 * @return {number}
 */
proto.Dictionary.Entry.prototype.getLuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 16, 0));
};


/** @param {number} value  */
proto.Dictionary.Entry.prototype.setLuid = function(value) {
  jspb.Message.setField(this, 16, value);
};


goog.object.extend(exports, proto);
